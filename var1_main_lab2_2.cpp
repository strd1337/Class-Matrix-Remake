/*
Вариант 1:

b) Создать класс Matrix-матрица. Данный класс содержит указатель на int, количество строк и 
столбцов и переменную - код ошибки. Определить конструктор без параметров, конструктор с одним параметром 
– квадратная матрица и конструктор с двумя параметрами – прямоугольная матрица и др. 
Определить методы доступа: возвращение и определение значения элемента (i,j). Определить функции сложения и 
вычитания (матрицы с матрицей), умножение матрицы на матрицу. Определить умножение матрицы на число. 
Проверить работу этого класса. В случае нехватки памяти, несоответствия размерностей, 
выхода за пределы используемой памяти устанавливать код ошибки.

*/

#include "var1_functions_Lab2_2.cpp"


int main(void) {
	srand(time(NULL));
	setlocale(LC_ALL, "Rus");
	
	Matrix A, B(3), C(3, 3), D(3, 4), E(3, 3), F(B);

	B.print("B");
	C.print("C");
	D.print("D");
	E.print("E");

	cout << "\nКопирование F(B):\n";
	F.print("F");

	cout << "\nПрисваивание A=D:\n";
	A = D;
	A.print("A");

	cout << "\nМатрица F до преобразования:\n";
	F.print("F");
	cout << "Матрица F после преобразования F[1, 2] = 10:\n";
	F.setMN(10, 1, 2);
	F.print("F");

	cout << "\nСложение матриц E += C:\n";
	E += C;
	E.print("E");

	cout << "\nВычитание матриц E -= B:\n";
	E -= B;
	E.print("E");

	cout << "\nУмножение матриц E *= C:\n";
	E *= C;
	E.print("E");

	cout << "\nУмножение матрицы на число E = E * 3:\n";
	E = E * 3;
	E.print("E");

	cout << "\nПолучения числа из матрциы:\n";
	F.print("F");
	int x = F.getMN(0, 4);
	cout << "\nЭлемент матрицы F[0, 1] = " << x << endl;

	return 0;
}
